[{"C:\\Users\\armos\\m-device\\src\\index.js":"1","C:\\Users\\armos\\m-device\\src\\App.js":"2","C:\\Users\\armos\\m-device\\src\\reportWebVitals.js":"3","C:\\Users\\armos\\m-device\\src\\MForm.js":"4","C:\\Users\\armos\\m-device\\src\\Results.js":"5","C:\\Users\\armos\\m-device\\src\\Picker.js":"6","C:\\Users\\armos\\m-device\\src\\reducers\\Reducer.js":"7","C:\\Users\\armos\\m-device\\src\\Result.js":"8","C:\\Users\\armos\\m-device\\src\\EditComponent.js":"9"},{"size":360,"mtime":1612866823854,"results":"10","hashOfConfig":"11"},{"size":637,"mtime":1612866294318,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":9255,"mtime":1613296352003,"results":"14","hashOfConfig":"11"},{"size":1281,"mtime":1612873881567,"results":"15","hashOfConfig":"11"},{"size":791,"mtime":1613293781090,"results":"16","hashOfConfig":"11"},{"size":1516,"mtime":1612874346305,"results":"17","hashOfConfig":"11"},{"size":2215,"mtime":1613376248310,"results":"18","hashOfConfig":"11"},{"size":7272,"mtime":1612788518674,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1fi427a",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},"C:\\Users\\armos\\m-device\\src\\index.js",[],["41","42"],"C:\\Users\\armos\\m-device\\src\\App.js",[],"C:\\Users\\armos\\m-device\\src\\reportWebVitals.js",[],"C:\\Users\\armos\\m-device\\src\\MForm.js",["43"],"C:\\Users\\armos\\m-device\\src\\Results.js",["44"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Result from './Result';\r\nimport EditComponent from './EditComponent';\r\nimport { Grid, GridCell, GridRow } from '@rmwc/grid';\r\n\r\nclass Results extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"main-form\">\r\n                <hr /><br />\r\n                <div className=\"form\">\r\n                    <Grid>\r\n                    {/* {this.props.results.map((result) => <Result key={result.id} result={result} />)} */}\r\n                    {this.props.results.map((result) => (\r\n                        <GridCell phone={12} tablet={12} desktop={4} span={4}>\r\n                        <div key={result.id}>\r\n                        {console.log(result.editing)}\r\n                            {result.editing ? <EditComponent result={result} key={result.id} /> :\r\n                                <Result key={result.id} result={result} />}\r\n                        </div>\r\n                        </GridCell>\r\n                    ))}\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        results: state\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Results);","C:\\Users\\armos\\m-device\\src\\Picker.js",[],"C:\\Users\\armos\\m-device\\src\\reducers\\Reducer.js",[],"C:\\Users\\armos\\m-device\\src\\Result.js",["45"],"C:\\Users\\armos\\m-device\\src\\EditComponent.js",["46","47","48"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { TextField } from '@rmwc/textfield';\r\nimport { Button } from '@rmwc/button';\r\nimport { Dialog, DialogActions, DialogButton, DialogContent } from '@rmwc/dialog';\r\n\r\nclass EditComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Countries: [\r\n                { name: 'Saudi Arabia', cites: ['Riyadh', 'Jeddah', 'Dammam'] },\r\n                { name: 'USA', cites: ['California', 'Florida', 'Virginia'] },\r\n            ],\r\n            selectedCountry: 'Saudi Arabia',\r\n            open: false,\r\n        }\r\n    }\r\n\r\n    handleEdit = (e) => {\r\n        e.preventDefault();\r\n        const nameNew = this.getName.value;\r\n        const CountryNew = this.getCountry.value;\r\n        const CityNew = this.getCity.value;\r\n        const addressNew = this.getAddress.value;\r\n        const PCNew = this.getPC.value;\r\n        const productTypeNew = this.getProducType.value;\r\n        const productTradeNameNew = this.getProductTradeName.value;\r\n        const ProductGenericNameNew = this.getProductGenericName.value;\r\n        const ProductModelNumberNew = this.getProductModelNumber.value;\r\n        const ProductDescriptionNew = this.getProductDescription.value;\r\n        const ProductExiprationDateNew = this.getProductExiprationDate.value;\r\n        const data = {\r\n            nameNew,\r\n            CountryNew,\r\n            CityNew,\r\n            addressNew,\r\n            PCNew,\r\n            productTypeNew,\r\n            productTradeNameNew,\r\n            ProductGenericNameNew,\r\n            ProductModelNumberNew,\r\n            ProductDescriptionNew,\r\n            ProductExiprationDateNew\r\n        }\r\n        this.props.dispatch({ type: 'UPDATE', id: this.props.result.id, data: data })\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ selectedCountry: e.target.value })\r\n    }\r\n\r\n    openDialog = () => {\r\n        this.setState({ open: true });\r\n    }\r\n\r\n    render() {\r\n        let Country = this.state.Countries.filter(Country => {\r\n            return Country.name === this.state.selectedCountry\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                <Dialog\r\n                    open={this.state.open}\r\n                    onClose={evt => {\r\n                        this.setState({ open: false });\r\n                    }}\r\n                // onClosed={evt => console.log(evt.detail.action)}\r\n                >\r\n\r\n                    <DialogContent>\r\n                        <form onSubmit={this.handleEdit}>\r\n                            <h3>Manufacturer</h3>\r\n                            <hr /><br />\r\n\r\n                            <TextField fullwidth label=\"Enter Name\" inputRef={(input) => this.getName = input}\r\n                                defaultValue={this.props.result.name} />\r\n                            <br /><br />\r\n\r\n                            <select required defaultValue={this.props.result.Country} ref={(input) => this.getCountry = input}\r\n                                onChange={this.handleChange.bind(this)}>\r\n                                {\r\n                                    this.state.Countries.map((country, i) => {\r\n                                        return <option>{country.name}</option>\r\n                                    })\r\n                                }\r\n                            </select>\r\n                            <br /><br /><br />\r\n\r\n                            <select required defaultValue={this.props.result.City} ref={(input) => this.getCity = input}>\r\n                                {\r\n                                    Country[0].cites.map((city, i) => {\r\n                                        return <option>{city}</option>\r\n                                    })\r\n                                }\r\n                            </select>\r\n                            <br /><br /><br />\r\n\r\n                            <TextField textarea fullwidth label=\"Enter Address\" inputRef={(input) => this.getAddress = input}\r\n                                defaultValue={this.props.result.address} />\r\n                            <br /><br />\r\n\r\n                            <TextField fullwidth label=\"Enter Postal Code\" inputRef={(input) => this.getPC = input}\r\n                                defaultValue={this.props.result.PC} />\r\n                            <br /><br />\r\n\r\n                            <br /><br />\r\n\r\n                            <h3>Device</h3>\r\n                            <hr /><br />\r\n                            <select required ref={(input) => this.getProducType = input} defaultValue={this.props.result.productType}>\r\n                                <option value=\"\" disabled selected>Select Product Type</option>\r\n                                <option value=\"A\">A</option>\r\n                                <option value=\"B\">B</option>\r\n                                <option value=\"C\">C</option>\r\n                            </select>\r\n                            <br /><br />\r\n\r\n                            <TextField fullwidth label=\"Enter Product Trade Name\" inputRef={(input) => this.getProductTradeName = input}\r\n                                defaultValue={this.props.result.productTradeName} />\r\n                            <br /><br />\r\n\r\n                            <TextField fullwidth label=\"Enter Product Generic Name\" inputRef={(input) => this.getProductGenericName = input}\r\n                                defaultValue={this.props.result.ProductGenericName} />\r\n                            <br /><br />\r\n\r\n                            <TextField fullwidth label=\"Enter Product Model Number\" inputRef={(input) => this.getProductModelNumber = input}\r\n                                defaultValue={this.props.result.ProductModelNumber} />\r\n                            <br /><br />\r\n\r\n                            <TextField textarea outlined fullwidth label=\"Enter Product Description\" inputRef={(input) => this.getProductDescription = input}\r\n                                defaultValue={this.props.result.ProductDescription} />\r\n                            <br /><br />\r\n\r\n                            {/* <Picker /> */}\r\n                            <TextField fullwidth label=\"Product Exipration Date\" type=\"date\" inputRef={(input) => this.getProductExiprationDate = input}\r\n                                defaultValue={this.props.result.ProductExiprationDate} />\r\n                            <br /><br />\r\n\r\n                            <br /><br />\r\n\r\n                            <Button className='btn' label=\"Update\" outlined onClick={() => this.setState({ open: false })} />\r\n                        </form>\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n\r\n                <Button className='btn' label=\"Edit\" outlined\r\n                    onClick={() => { this.props.dispatch({ type: 'EDIT_DATA', id: this.props.result.id }) }, () => this.setState({ open: true })} />\r\n                &nbsp;\r\n                <Button className='btn' label=\"Delete\" outlined\r\n                    onClick={() => this.props.dispatch({ type: 'DELETE_DATA', id: this.props.result.id })}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default connect()(EditComponent);",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":28,"nodeType":"55","messageId":"56","endLine":1,"endColumn":36},{"ruleId":"53","severity":1,"message":"57","line":5,"column":26,"nodeType":"55","messageId":"56","endLine":5,"endColumn":33},{"ruleId":"53","severity":1,"message":"58","line":3,"column":10,"nodeType":"55","messageId":"56","endLine":3,"endColumn":16},{"ruleId":"53","severity":1,"message":"59","line":5,"column":18,"nodeType":"55","messageId":"56","endLine":5,"endColumn":31},{"ruleId":"53","severity":1,"message":"60","line":5,"column":33,"nodeType":"55","messageId":"56","endLine":5,"endColumn":45},{"ruleId":"61","severity":1,"message":"62","line":150,"column":108,"nodeType":"63","messageId":"64","endLine":150,"endColumn":109},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'GridRow' is defined but never used.","'Button' is defined but never used.","'DialogActions' is defined but never used.","'DialogButton' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation"]